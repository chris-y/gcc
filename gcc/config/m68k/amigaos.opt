
mregparm=
Target RejectNegative Var(amigaos_regparm) Joined UInteger Init(-1)
Pass arguments through registers.

noixemul
Target RejectNegative
Do not use ixemul.library - use libnix instead to link

ramiga-lib
Target RejectNegative
Use libinit.o as start file

ramiga-libr
Target RejectNegative
Use libinitr.o as start file

ramiga-dev
Target RejectNegative
Use devinit.o as start file

msmall-code
Target RejectNegative Var(flag_smallcode,1)
small code model

fbaserel
Target Report Var(flag_pic,3) 
data is addressed relative to a4

fbaserel32
Target Report Var(flag_pic,4)
data is addressed relative to a4 with 32 bit offsets

resident
Target Common Report Var(flag_resident,3)
data is addressed relative to a4, linked as resident

resident32
Target Common Report Var(flag_resident,4)
data is addressed relative to a4 with 32 bit offsets, linked as resident

mcrt=
Target RejectNegative Var(amigaos_crt) Joined
Specify startup binary

fbbb=
Target RejectNegative Report Var(string_bbb_opts) Joined help_columns(80)
-fbbb=Enable Bebbo's optimizations.               
+    enable all optimizations                     
a    commute add move instructions                
b    use register for base addresses              
c    convert load const and compare into a sub    
e    eliminate dead assignments + redundant loads 
f    shrink stack frame                           
i    use post increment on addresses              
l    remove single used lea if possible           
m    merge add and move statements                
p    propagate move assignment pairs out of loops 
r    register renaming to maybe save registers    
s    a strcpy optimization                        
z    final pass with simple substitutions         
v    be verbose                                   
V    be very verbose                              
x    dump insns                                                                        
Default: -fbbb=+ which yields -fbbb=abcefimprs
